import os
import datetime
import requests
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Location

BOT_TOKEN = "7193872414:AAFA_aW7LzLKppy5fSZ-iYVW6A0fy0aMSgw"
OPENWEATHERMAP_API_KEY = "6df40c91c04d29efe8ab5a85c0d29e51"
OPENWEATHERMAP_API_URL = "http://api.openweathermap.org/data/2.5/weather"
AIR_API_URL = 'https://api.api-ninjas.com/v1/airquality'
AIR_API_KEY = 'xy3f78YBcCE5/DNQW/dqKA==Op4Zzd3SCjm5IRtK'
cloudiness_translation = {
    'clear sky': '–Ø—Å–Ω–æ',
    'light rain': '–ú–∞–ª–µ–Ω—å–∫–∏–π –¥–æ–∂–¥—å',
    'few clouds': '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ',
    'scattered clouds': '–†–∞—Å—Å–µ—è–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞',
    'broken clouds': '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
    'overcast clouds': '–ü–∞—Å–º—É—Ä–Ω–æ',
    'mist': '–¢—É–º–∞–Ω',
    'smoke': '–î—ã–º–∫–∞',
    'haze': '–ú–≥–ª–∞',
    'dust': '–ü—ã–ª—å–Ω–æ',
    'fog': '–¢—É–º–∞–Ω',
    'sand': '–ü–µ—Å–æ–∫',
    'ash': '–ü–µ–ø–µ–ª',
    'squall': '–®–∫–≤–∞–ª–∏—Å—Ç–∞—è –ø–æ–≥–æ–¥–∞',
    'tornado': '–¢–æ—Ä–Ω–∞–¥–æ',
    'light intensity drizzle': '–ì—Ä–∏–±–Ω–æ–π –¥–æ–∂–¥–∏–∫'
}

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button = KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
    keyboard.add(button)
    await message.reply("–ü—Ä–∏–≤–µ—Ç!üñê \n–Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.", reply_markup=keyboard)


@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.LOCATION])
async def get_weather(message: types.Message):
    if message.content_type == types.ContentType.TEXT:
        city = message.text.capitalize()

        weather_params = {
            'q': city,
            'appid': OPENWEATHERMAP_API_KEY, 
            'units': 'metric'
        }
        air_params = {
            'city': city
        }
    else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–æ–∫–∞—Ü–∏—é
        latitude = message.location.latitude
        longitude = message.location.longitude

        weather_params = {
            'lat': latitude,
            'lon': longitude,
            'appid': OPENWEATHERMAP_API_KEY,
            'units': 'metric'
        }
        air_params = {
            'lat': latitude,
            'lon': longitude
        }

    response = requests.get(OPENWEATHERMAP_API_URL, params=weather_params)
    weather_data = response.json()
    air_response = requests.get(AIR_API_URL, headers={'X-Api-Key': AIR_API_KEY}, params=air_params)
    air_data = air_response.json()
    if response.status_code == 200 and air_response.status_code == requests.codes.ok:
        weather_description = weather_data['weather'][0]['description']
        temperature = round(weather_data['main']['temp'])
        humidity = weather_data['main']['humidity']
        timezone_offset = weather_data['timezone']
        local_time = datetime.datetime.utcnow() + datetime.timedelta(seconds=timezone_offset)
        formatted_local_time = local_time.strftime('%d.%m.%Y %H:%M:%S')
        air_quality_points = air_data["overall_aqi"]
        air_NO2_amount = air_data["NO2"]["concentration"]

        if weather_description in cloudiness_translation:
            weather_description_ru = cloudiness_translation[weather_description]
        else:
            weather_description_ru = weather_description
        weather_content = f"\n–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {weather_description_ru}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {formatted_local_time}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∑–æ—Ç–∞ –≤ –≤–æ–∑–¥—É—Ö–µ: {air_NO2_amount}\n–ò–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞: {air_quality_points}"
        if message.content_type == types.ContentType.TEXT:
            weather_message = f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}: {weather_content}"
        else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–æ–∫–∞—Ü–∏—é
            weather_message = f"–ü–æ–≥–æ–¥–∞ –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏: {weather_content}"
    else:
        if message.content_type == types.ContentType.TEXT:
            weather_message = '–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤ —Ä–µ–∞–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ–ª—å–∫–æ –≤ –≤–∞—à–∏—Ö –º—ã—Å–ª—è—Ö...\nÔºûÔπèÔºú'
        else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–æ–∫–∞—Ü–∏—é
            weather_message = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.'

    await message.reply(weather_message)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
